import WDIOReporter, { SuiteStats, HookStats, RunnerStats, TestStats, AfterCommandArgs, CommandArgs } from '@wdio/reporter';
import { HtmlReporterOptions, Metrics } from "./types";
export default class HtmlReporter extends WDIOReporter {
    options: HtmlReporterOptions;
    openInProgress: boolean;
    defaultTestIndent: string;
    metrics: Metrics;
    _indents: number;
    _suiteIndents: Record<string, number>;
    _suiteUids: Set<unknown>;
    _suiteStats: SuiteStats[];
    _currentSuiteUid: string;
    _currentTestUid: string;
    _currentCid: string;
    _orderedSuites: SuiteStats[];
    constructor(options: HtmlReporterOptions);
    get isSynchronised(): boolean;
    onRunnerStart(runner: RunnerStats): void;
    onSuiteStart(suite: SuiteStats): void;
    onTestStart(theTest: TestStats): void;
    onTestPass(theTest: TestStats): void;
    onTestSkip(test: TestStats): void;
    onTestFail(theTest: TestStats): void;
    onTestEnd(theTest: TestStats): void;
    onHookStart(hook: HookStats): void;
    onHookEnd(hook: HookStats): void;
    onSuiteEnd(suite: SuiteStats): void;
    isScreenshotCommand(command: CommandArgs): boolean;
    onAfterCommand(command: AfterCommandArgs): void;
    onRunnerEnd(runner: RunnerStats): void;
    getSuite(uid: string | undefined): SuiteStats | undefined;
    pushSuite(suite: SuiteStats): void;
    removeSuite(uid: string | undefined): void;
    getTest(uid: string): TestStats | undefined;
    pushTest(test: TestStats): void;
    moveErrorsToEvents(test: TestStats): void;
    saveScreenshot(filepath: string): void;
    saveMessage(message: string): void;
    filterSuites(suites: SuiteStats[]): void;
    /**
     * Get suites in the order they were called
     * @return {Array} Ordered suites
     */
    getOrderedSuites(): SuiteStats[];
    indent(uid: string): string;
}
